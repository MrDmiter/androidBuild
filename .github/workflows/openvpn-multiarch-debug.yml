name: Build OpenVPN for Android Multi-Arch

on:
  workflow_dispatch:
    inputs:
      openvpn_version:
        description: 'OpenVPN version'
        required: true
        default: '2.6.14'
      openssl_version:
        description: 'OpenSSL version'
        required: true
        default: '1.1.1w'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360 # Increased timeout to 6 hours for potentially long builds

    strategy:
      matrix:
        # Define target Android ABIs and toolchain hosts
        arch:
          - { abi: "arm64-v8a", host: "aarch64-linux-android", api: "21" }
         # - { abi: "armeabi-v7a", host: "armv7a-linux-androideabi", api: "21" }
          # - { abi: "x86", host: "i686-linux-android", api: "21" }
          # - { abi: "x86_64", host: "x86_64-linux-android", api: "21" }

    steps:
    # Checkout the code
    - name: Checkout
      uses: actions/checkout@v4

    # Install required packages
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential autoconf automake libtool pkg-config libcap-ng-dev
        echo 'Installing system dependencies...';

    # Set up the Android NDK
    - name: Setup NDK
      id: setup_ndk_path # Added ID to reference outputs
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c

    # Set environment variables for NDK and toolchains
    - name: Set up env
      run: |
        # Use the output from the 'setup_ndk_path' step to set environment variables
        echo "ANDROID_NDK_HOME=${{ steps.setup_ndk_path.outputs.ndk-path }}" >> $GITHUB_ENV
        echo "NDK_ROOT=${{ steps.setup_ndk_path.outputs.ndk-path }}" >> $GITHUB_ENV
        echo "${{ steps.setup_ndk_path.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

        # For good measure, also set them directly for the current shell context
        export ANDROID_NDK_HOME="${{ steps.setup_ndk_path.outputs.ndk-path }}"
        export NDK_ROOT="${{ steps.setup_ndk_path.outputs.ndk-path }}"
        export PATH="$PATH:${{ steps.setup_ndk_path.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin"


    # Download OpenVPN and OpenSSL sources
    - name: Download Sources
      run: |
        mkdir -p build
        cd build
        echo 'Downloading OpenVPN source...'; wget https://swupdate.openvpn.org/community/releases/openvpn-${{ github.event.inputs.openvpn_version }}.tar.gz
        echo 'Downloading OpenSSL source...'; wget https://www.openssl.org/source/openssl-${{ github.event.inputs.openssl_version }}.tar.gz
        echo 'Extracting OpenVPN source...'; tar -xzf openvpn-${{ github.event.inputs.openvpn_version }}.tar.gz
        echo 'Extracting OpenSSL source...'; tar -xzf openssl-${{ github.event.inputs.openssl_version }}.tar.gz
        
        # Verify extraction
        echo "Verifying OpenVPN source directory:"
        ls -ld openvpn-${{ github.event.inputs.openvpn_version }}
        echo "Verifying OpenSSL source directory:"
        ls -ld openssl-${{ github.event.inputs.openssl_version }}


    # Build OpenSSL statically for each architecture
    - name: Build OpenSSL
      run: |
        cd build/openssl-${{ github.event.inputs.openssl_version }}
        
        case "${{ matrix.arch.abi }}" in
          arm64-v8a) target="android-arm64" ;;
          armeabi-v7a) target="android-arm" ;;
          x86) target="android-x86" ;;
          x86_64) target="android-x86_64" ;;
        esac

        echo "Running OpenSSL Configure with target: $target"; \
        ./Configure $target -D__ANDROID_API__=${{ matrix.arch.api }} \
          --prefix=$PWD/../openssl_${{ matrix.arch.abi }} \
          no-shared no-tests -fPIC -DPIC
          # --with-ndk-platform=${{ matrix.arch.api }} --cross-compile-prefix=${{ steps.setup_ndk_path.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.arch.host }}${{ matrix.arch.api }}- # <-- Видалити або закоментувати цей рядок

        # Execute make clean ONLY after Configure has generated the Makefile
        make clean || true 

        echo 'Running make for OpenSSL...'; make -j$(nproc)
        echo 'Installing OpenSSL libraries...'; 
        make install_sw

        # Verify OpenSSL installation
        echo "Contents of installed OpenSSL include directory:"
        ls -l $PWD/../openssl_${{ matrix.arch.abi }}/include
        echo "Contents of installed OpenSSL lib directory:"
        ls -l $PWD/../openssl_${{ matrix.arch.abi }}/lib


    # Build OpenVPN client statically for each architecture
    - name: Build OpenVPN
      run: |
        cd build
        mkdir -p openvpn_${{ matrix.arch.abi }}
        cd openvpn_${{ matrix.arch.abi }}

        # Export environment variables for the current shell context
        export CC=${{ matrix.arch.host }}${{ matrix.arch.api }}-clang
        export CXX=${{ matrix.arch.host }}${{ matrix.arch.api }}-clang++
        export AR=${{ matrix.arch.host }}-ar
        export RANLIB=${{ matrix.arch.host }}-ranlib
        export STRIP=${{ matrix.arch.host }}-strip

        export CFLAGS="-fPIC -DPIC -O2 -DANDROID -D__ANDROID_API__=${{ matrix.arch.api }}"
        export LDFLAGS="-Wl,-z,max-page-size=0x4000 -static-libgcc"
        export CPPFLAGS="-DANDROID -D__ANDROID_API__=${{ matrix.arch.api }}"

        # Define OpenSSL installation paths
        OPENSSL_INSTALL_DIR=$PWD/../openssl_${{ matrix.arch.abi }}
        OPENSSL_CFLAGS="-I${OPENSSL_INSTALL_DIR}/include"
        OPENSSL_LIBS="-L${OPENSSL_INSTALL_DIR}/lib -lssl -lcrypto"

        # Run OpenVPN configure, explicitly passing OpenSSL paths
        ../openvpn-${{ github.event.inputs.openvpn_version }}/configure \
          --host=${{ matrix.arch.host }} \
          --prefix=$PWD/install \
          --enable-static --disable-shared \
          --disable-debug --enable-small \
          --disable-plugins --disable-management \
          --disable-systemd --disable-iproute2 \
          --disable-dco --disable-selinux \
          --disable-lz4 --disable-lzo --disable-pkcs11 \
          --disable-server --disable-multi --disable-user-group \
          --disable-chroot --disable-capability-dropping \
          --disable-linuxdir --disable-dep-check \
          --without-cap-ng --with-crypto-library=openssl \
          "${OPENSSL_CFLAGS}" \
          "${OPENSSL_LIBS}" # Enclose in quotes to ensure proper parsing

        echo 'Running make for OpenVPN...'; make -j$(nproc)
        echo 'Installing OpenVPN binaries...'; make install

        # Verify OpenVPN installation
        echo "Contents of installed OpenVPN directory:"
        ls -l $PWD/install/sbin


    # Build JNI shared library wrappers (libopenvpn.so, etc.)
    - name: Create Shared Library
      run: |
        mkdir -p android_libs/lib/${{ matrix.arch.abi }}
        mkdir -p src_lib

        cat > src_lib/libopenvpn.c << 'EOF'
        #include <jni.h>
        #include <stdlib.h>
        #include <unistd.h>
        #include <string.h>
        #include <sys/wait.h>
        #include <android/log.h>
        #define LOG_TAG "OpenVPN"
        #define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
        
        // WARNING: Using system(cmd) for executing commands can be a security risk
        // if 'command' input is not strictly controlled and sanitized, as it may
        // allow for command injection vulnerabilities.
        // For production environments, consider using safer alternatives like
        // fork() and execve() with carefully managed arguments, or
        // dedicated Android APIs for process execution.
        JNIEXPORT jint JNICALL Java_com_example_OpenVPN_exec(JNIEnv* env, jobject obj, jstring command) {
            const char* cmd = (*env)->GetStringUTFChars(env, command, 0);
            int ret = system(cmd);
            (*env)->ReleaseStringUTFChars(env, command, cmd);
            return ret;
        }
        EOF

        echo "Compiling JNI shared library for ${{ matrix.arch.abi }}..."; \
        ${CC} -shared -fPIC -llog \
          -Wl,-z,max-page-size=0x4000 \
          -o android_libs/lib/${{ matrix.arch.abi }}/libopenvpn.so \
          src_lib/libopenvpn.c

        cp android_libs/lib/${{ matrix.arch.abi }}/libopenvpn.so android_libs/lib/${{ matrix.arch.abi }}/libopvpnutil.so
        cp android_libs/lib/${{ matrix.arch.abi }}/libopenvpn.so android_libs/lib/${{ matrix.arch.abi }}/libovpnexec.so

    # Upload output artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openvpn-libs-${{ matrix.arch.abi }}
        path: android_libs/lib/${{ matrix.arch.abi }}
